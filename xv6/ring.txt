=============================================================
Ring Buffer API
=============================================================

struct ring is opaque for users of the API

behavior of ring buffers is undefined if there is more than one
concurrent reader or writer process

struct ring *ring_attach (uint token)

  token is the name of the ring that we want to create or attach to;
  returns NULL on fail

  initially, zero bytes are reserved for reading and zero bytes are
  reserved for writing

int ring_size (uint token)

  returns total capacity of the named ring in bytes

int ring_detach (uint token);

  return 0 on successful detach, -1 otherwise

ring_res ring_write_reserve (ring *r, int bytes)

  reserves bytes for writing, can preform short reserve

  see common notes about reservation functions below

void ring_write_notify (ring *r, int bytes)

  notifies the reader that written bytes are available for consumption

  it is an error to call write_notify with more bytes than are
  currently reserved (it is undefined behavior)

ring_res ring_read_reserve (ring *r, int bytes)

  reserves bytes for reading, can preform short reserve

  see common notes about reservation functions below

void ring_read_notify (ring *r, int bytes)

  notifies the writer that read bytes are available for production

  it is an error to call read_notify with more bytes than are
  currently reserved for reading (it is undefined behavior)

int ring_write (ring *r, void *buf, int bytes)
int ring_read (ring *r, void *buf, int bytes)
    
    return -1 on failure, return 0 on success
    
  these provide pipe-like semantics and are built on top of the
  primitive operations

  Question: should these be blocking operations?

common notes about ring reservation functions:

  these return a ring containing a pointer to the start of
  the reserved region and the amount of bites reserved on
  success, NULL on failure to reserve

  behavior is undefined upon trying to reserve more than the ring's
  capacity

  behavior is undefined unless the byte count is a multiple of 4

  note that a reserved region may wrap around the end of the ring

  consecutive successful calls to ring_write_reserve or
  ring_read_reserve are guaranteed to return pointers to consecutive
  regions of memory except that wrapping will occur at the end of the
  ring

=============================================================
Ring Buffer Internals
=============================================================

ring size should be compile-time configurable, and must be power-of-2
number of pages

the ring should use the xv6 shmget() API to reserve shared memory

head and tail pointers each go at the start of their own cache line in
the shared memory page immediately following the ring

head and tail are unsigned 32-bit integers

struct ring {
       unsigned tok;
       void *buf;
}

struct ring_res {
        unsigned size;
        void *buf;
}

=============================================================
ring invariants and properties

all math operations below are modulo 2^32

S is the ring size in bytes, a compile-time constant
H is the head reference, a shared free-running unsigned 32-bit integer
T is the tail reference, a shared free-running unsigned 32-bit integer
RH is the reserve head, a non-shared free-running unsigned 32-bit integer
RT is the reserve tail, a non-shared free-running unsigned 32-bit integer
S must be a power of 2 and also less than 2^32
H - T < S
free space for writer = S - (RH - T)
reserved space for writer = RH - H
data available = H - T
mask = S-1
base = ring buffer base address

write_reserve(n):
    if n > free space for writer return fail
        oldRH = RH
    if RH%S < N:
        RH += S-(RH%S)
    else:
        RH += n
    return base + (oldRH & mask)

write_notify_all():
     H = RH

TODO: 

- ensure concurrency safety under the assumption of a single reader
  and a single writer

=============================================================
