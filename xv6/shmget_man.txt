NAME
	shmget - allocates a shared memory segment

SYNOPSIS
	int shmget(uint token, char * addr, uint size);

	if this region overlaps with a region used for 
	any other purpose the use is undefined

DESCRIPTION
	shmget() returns -1 on failure, returns 0 on success.
	On success shmget() creates a shared memory segment
	in the calling process, allocating at least one page.
	addr must be a page aligned virtual address; size is
	the number of bytes the user wants to share.  If size
	is less than a page, a page will be allocated; pages
	allocated will be size rounded up to the nearest number
	of pages.	
	
	If the user wants to share a memory segment already set
	up by another process, call shmget with the correct token
	and a size of zero.  

	When a new shared memory segment is created, its contents
	are initialized to zero values.  


	TOKEN:
	Identifying uint which specifies which memory location 
	you wish to either map in or associate with a memory location

	ADDR:
	Virtual address you wish to map in to your process. The data
	within that virtual address will be accessable by anyone with
	the same token. 

	SIZE:
	Size of the buffer. Size must be modulo PGSIZE(4096 bytes)

	List of recommended address ranges:
	0x10000000 -> 0x7FFFFFFF
	Using the upper range of the process space will allow malloc
	to work correctly. 0x80000000 and above is reserved for the 
	kernel, I think.
	
	Note: when allocating at the top of the memory range 
	i.e 7FFF -- you have to be wary about how large your 
	buffer is.  If you're not careful your buffer will extend
	into the 0x8 region, causing a page fault or remap trap.
	
	RETURNS:
	Returns -1 on failure, 0 on succes. 
	Failures include: 

	Using a token that has already been allocated to a
	shared memory region. 

	Sending size that is not modulo PGSIZE
	
	Sending address that is in kernel land
	
	
	

	
